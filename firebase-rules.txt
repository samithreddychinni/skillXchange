// Firestore Rules
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Allow authenticated users to read and write their own data
    match /users/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Allow authenticated users to read public profiles
    match /users/{userId} {
      allow read: if request.auth != null && (
        resource.data.visibility == 'public' || 
        request.auth.uid == userId
      );
    }
    
    // Allow authenticated users to read and write their own matches
    match /matches/{matchId} {
      allow read, write: if request.auth != null && (
        matchId.split('_').hasAny([request.auth.uid])
      );
    }
    
    // Allow authenticated users to read and write their own chats
    match /chats/{chatId} {
      allow read, write: if request.auth != null && (
        chatId.split('_').hasAny([request.auth.uid])
      );
    }
    
    // Allow authenticated users to read and write their own messages
    match /messages/{messageId} {
      allow read, write: if request.auth != null && (
        resource.data.senderId == request.auth.uid || 
        resource.data.chatId.split('_').hasAny([request.auth.uid])
      );
    }
    
    // Allow authenticated users to read and write call data
    match /calls/{callId} {
      allow read, write: if request.auth != null && (
        resource.data.participants.hasAny([request.auth.uid]) ||
        request.resource.data.participants.hasAny([request.auth.uid])
      );
    }
    
    // Allow authenticated users to read and write call signaling data
    match /callSignaling/{callId} {
      allow read, write: if request.auth != null;
    }
    
    // Allow authenticated users to read and write call ICE candidates
    match /callIceCandidates/{callId} {
      allow read, write: if request.auth != null;
    }
    
    // Allow authenticated users to read and write call ratings
    match /callRatings/{ratingId} {
      allow read, write: if request.auth != null && (
        request.resource.data.ratedBy == request.auth.uid
      );
    }
    
    // Allow authenticated users to read and write history records
    match /history/{recordId} {
      allow read, write: if request.auth != null && (
        resource.data.userID == request.auth.uid || 
        request.resource.data.userID == request.auth.uid
      );
    }
    
    // Default deny
    match /{document=**} {
      allow read, write: if false;
    }
  }
}

// Storage Rules
service firebase.storage {
  match /b/{bucket}/o {
    match /profile-images/{userId}/{fileName} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == userId;
    }
    
    match /chat-files/{chatId}/{fileName} {
      allow read: if request.auth != null && (
        chatId.split('_').hasAny([request.auth.uid])
      );
      allow write: if request.auth != null && (
        chatId.split('_').hasAny([request.auth.uid])
      );
    }
    
    // Default deny
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}

